import numpy as np
from matplotlib import pyplot as plt
from matplotlib.image import imread
from pylab import *
import EM

#Генерация данных для первого пункта
def generate_data(N, D, K):
    sigma_s = np.zeros((K, D, D))
    mu_s = np.zeros((K, D))
    pi_s = np.zeros(K)
    for k in range(K):
        sigma_s[k] = np.diag(np.ones(D))
        mu_s[k] = np.random.randn(D) + np.ones(D) * (k + 1) * 3
    pi_s = np.random.choice(np.arange(1, K+1), K, replace=False) / np.sum(np.arange(1, K + 1))
    X = np.concatenate([np.random.multivariate_normal(mu, sigma, int(pi * N))
                    for pi, mu, sigma in zip(pi_s, mu_s, sigma_s)])
    return X

#для нескольких запусков со случайными начальными приближениями
def EM_s(X, count, max_iter=100, mu_s=None, sigma_s=None, 
         pi_s=None, components=10, tol=1e-3, cov_type='full'):
    
    like_hood = -np.inf
    for i in range(count):
        a = EM.EM_algorithm(sigma_s=sigma_s, mu_s=mu_s, 
                            pi_s=pi_s, cov_type=cov_type, 
                            components=components, tol=tol,
                           max_iter=max_iter)
        a.fit(X)
        if (like_hood < a.res['likehood'][-1]):
            like_hood = a.res['likehood'][-1]
            sigma = a.res['sigma']
            mu = a.res['mu']
            pi = a.res['pi']
    return {
            'best sigma': sigma,
            'best mu': mu,
            'best pi': pi,
            'best likehood': like_hood,
    }

#второй пункт
#хорошее начальное приближение

def good_graph(X):
    a = EM.EM_algorithm(components=2, tol=1e-6, max_iter=60)
    a.fit(X)
    y = a.res['gamma'].argmax(axis=1)
    plt.scatter(X[:, 0], X[:, 1], c=y, s=90)
    plt.title('Good clastering', fontsize=30)
    plt.show()
    
def generate_bad_data(N):
    mu_s = np.array([[5, 2],
                    [5, -2]])
    sigma_s = np.array([2 * np.eye(2), 2 * np.eye(2)])
    pi_s = np.array([0.5, 0.5])
    X = np.concatenate([np.random.multivariate_normal(mu, sigma, int(pi * N))
                    for pi, mu, sigma in zip(pi_s, mu_s, sigma_s)])
    return X

def bad_graph(X):
    mu_s = np.array([[-5, 0],
                    [0, 5]])
    a = EM.EM_algorithm(components=2, mu_s=mu_s, tol=1e-6, max_iter=60)
    a.fit(X)
    y = a.res['gamma'].argmax(axis=1)
    plt.scatter(X[:, 0], X[:, 1], c=y, s=90)
    plt.title('Bad clastering', fontsize=30)
    plt.show()

#возрастание логарифма правдоподобия    
def inc_log(X):
    a = EM.EM_algorithm(components=10, tol=1e-10, max_iter=60)
    a.fit(X)
    plt.title('Increase of log-likelihood', fontsize=30)
    plt.xlabel('number of iteration', fontsize=15)
    plt.ylabel('log-likelihood', fontsize=15)
    plt.plot(a.res['likelihood'])
    plt.show()
    
#третий пункт

def read_data_ped():
    X = np.zeros((1099, 240, 360, 3))
    images = [('pedestrians/input/in00' + '0' * (4 - min(len(str(x)), 4)) + str(x) + '.jpg') 
              for x in range(1, 1100)]
    i = 0
    for image in images:
        X[i] = (imread(image) / 255.0)
        i += 1
    Y = np.zeros((1099, 240, 360)).astype('bool')
    mask = np.zeros((1099, 240, 360)).astype('bool')
    images = [('pedestrians/groundtruth/gt00' + '0' * (4 - min(len(str(x)), 4)) + str(x) + '.png') 
              for x in range(1, 1100)]
    i = 0
    for image in images:
        matrix_image = imread(image)
        Y[i] = np.all((matrix_image == 1), axis=2)
        mask[i] = np.all((matrix_image == 1) | (matrix_image == 0), axis=2)
        i += 1
    X_train = X[ :300]
    Y_train = Y[ :300]
    X_test = X[300: ]
    Y_test = Y[300: ]
    mask_test = mask[300: ]
    return (X_train, X_test, Y_train, Y_test, mask_test)

#чтение данных
def read_data_traf():
    X = np.zeros((1570, 240, 320, 3))
    images = [('traffic/input/in00' + '0' * (4 - min(len(str(x)), 4)) + str(x) + '.jpg') 
              for x in range(1, 1100)]
    i = 0
    for image in images:
        X[i] = (imread(image) / 255.0)
        i += 1
    Y = np.zeros((1570, 240, 320)).astype('bool')
    mask = np.zeros((1570, 240, 320)).astype('bool')
    images = [('traffic/groundtruth/gt00' + '0' * (4 - min(len(str(x)), 4)) + str(x) + '.png') 
              for x in range(1, 1100)]
    i = 0
    for image in images:
        matrix_image = imread(image)
        Y[i] = np.all((matrix_image == 1), axis=2)
        mask[i] = np.all((matrix_image == 1) | (matrix_image == 0), axis=2)
        i += 1
    X_train = np.vstack([X[581: 723], X[752: 951]])
    Y_train = np.vstack([Y[581: 723], Y[752: 951]])
    X_test = X[1000: ]
    Y_test = Y[1000: ]
    mask_test = mask[1000: ]
    return (X_train, X_test, Y_train, Y_test, mask_test)

    
